function [Corners] = CornerDetector(img,m,n)
%Apply  a simple corner detecting algorithm

Corners = zeros(10,2);
numCorners = 1;

img_temp = zeros(m,n);

%Run Corner Filter
for i = 2:m-1
    for j = 2:n-1
         val =          sqrt( (img(i,j) - img(i,j+1))^2 + ... 
                              (img(i,j) - img(i,j-1))^2 + ...
                              (img(i,j) - img(i+1,j))^2 + ...
                              (img(i,j) - img(i-1,j))^2 + ...
                              (img(i,j) - img(i+1,j+1))^2 + ... 
                              (img(i,j) - img(i+1,j-1))^2 + ...
                              (img(i,j) - img(i-1,j+1))^2 + ...
                              (img(i,j) - img(i-1,j-1))^2 ...
                             );
         
         if val > 0
             img_temp(i,j) = val;
         end
    end
end

img_temp1 = zeros(m,n);
%Find Corners
for i = 2:m-1
    for j = 2:n-1
        
        %Highlight if it is a corner
        local_maximum = 0;
        for k = -1:1
            for l = -1:1
                if img_temp(i+k,j+l) > local_maximum
                    local_maximum = img_temp(i+k,j+l);
                end
            end
        end
        
        %Remove everything that is not the local maximum
        for k = -1:1
            for l = -1:1
                if img_temp(i+k,j+l) < local_maximum
                    img_temp(i+k,j+l) = 0;
                end
            end
        end
        
        %Check if it is a corner
        val = 9;
        if img_temp(i,j) == 0
            val = 0;
        end
        for k = -1:1
            for l = -1:1
                if img_temp(i+k,j+l) > 0
                    val = val - 1;
                end
            end
        end
        
       if val >= 7
           img_temp1(i,j) = val;
       end
        
    end
end

numCorners = sum(sum(ordfilt2(img_temp,1,ones(3))));


end

