function [Corners] = CornerDetector(img,m,n,minval)
%Apply  a simple corner detecting algorithm

Corners = zeros(10,2);
numCorners = 1;
temp = zeros(m,n);

%Applying Convolutions
Ix = zeros(m,n);
Iy = zeros(m,n);

for i = 2:m-1
    for j = 2:n-1
        Ix(i,j) = img(i+1,j) - img(i-1,j);
        Iy(i,j) = img(i,j+1) - img(i,j-1);
    end
end

%Square and Cross Multiply
Ix2 = Ix.^2;
Iy2 = Iy.^2;
Ixy = Ix.*Iy;

%Apply Guassian Filter
tIx2 = zeros(m,n);
tIy2 = zeros(m,n);
tIxy = zeros(m,n);
for i = 2:m-1
    for j = 2:n-1
        
        valx = 0;
        valy = 0;
        valxy = 0;
        for h = -1:1
            for k = -1:1
                if (h == -1 || h == 1) && (k == -1 || k == 1)
                    valx = valx + Ix2(i+h,j+k)/16;
                    valy =  valy + Iy2(i+h,j+k)/16;
                    valxy = valxy + Ixy(i+h,j+k)/16;
                elseif h == 0 && (k == -1 || k == 1)
                    valx = valx + Ix2(i+h,j+k)/8;
                    valy =  valy + Iy2(i+h,j+k)/8;
                    valxy = valxy + Ixy(i+h,j+k)/8;
                elseif (h == -1 || h == 1) && k == 0
                    valx = valx + Ix2(i+h,j+k)/8;
                    valy =  valy + Iy2(i+h,j+k)/8;
                    valxy = valxy + Ixy(i+h,j+k)/8;
                elseif h == 0 && k == 0
                    valx = valx + Ix2(i+h,j+k)/4;
                    valy =  valy + Iy2(i+h,j+k)/4;
                    valxy = valxy + Ixy(i+h,j+k)/4;
                end
            end
        end
        tIx2(i,j) = valx;
        tIy2(i,j) = valy;
        tIxy(i,j) = valxy;
    end
end

Ix2 = tIx2;
Iy2 = tIy2;
Ixy = tIxy;

Ir = zeros(m,n);
thresh = 0;
k = 0.04;

%Estimating the Eigen Value
R = Ix2.*Iy2 - Ixy.^2 - k*(Ix2+Iy2).^2;

%Filter Matrix by only keep max in a conv
for i = 2:m-1
    for j = 2:n-1
        %If center is a val remove surrounding
        for h = -1:1
            for k = -1:1
                    if h ~= 0 && k ~= 0
                        %R(i+k,j+k) = 0;
                    end
            end
        end
    end
end

itr = 0;
count = 0;
min_corners = 3;
max_corners = 10;
thresh = 1;
while (count < min_corners || count > max_corners) && itr < 10
    if count < min_corners
        thresh = thresh*0.8;
    elseif count > max_corners
        thresh = thresh*1.2;
    end
    Rtemp = (R>thresh);
    count = sum(sum(Rtemp));
    itr = itr + 1;
end

end

